buildscript {
    repositories {
		mavenCentral()
		jcenter()
    }

	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
    }
}



allprojects {
	apply plugin: "java"
	apply plugin: "com.github.johnrengelman.shadow"
	apply plugin: "jacoco"

	if (project.hasProperty('projVersion')) {
		project.version = project.projVersion
	} else {
		project.version = '1.0.0'
	}

    repositories {
		maven {
			url "https://repo.syscy.de/repository/maven-public/"
			metadataSources {
				mavenPom()
				artifact()
			}
		}
		maven {
			url "https://nexus.velocitypowered.com/repository/maven-public/"
		}
    }

	ext {
		lombokVersion = "1.18.20"

		purpurVersion = "1.16.5-SNAPSHOT"
		luckPermsVersion = "5.3"
		velocityVersion = "3.0.1"
		kageCoreVersion = "1.0.0-SNAPSHOT"
	}

	dependencies {
		compileOnly "org.projectlombok:lombok:$lombokVersion"
		annotationProcessor "org.projectlombok:lombok:$lombokVersion"
		testImplementation "org.mockito:mockito-core:3.+"
		testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'

		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
		implementation "com.esotericsoftware:kryonet:2.22.0-RC1"

	}

	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}

	jacocoTestReport {
		dependsOn test // tests are required to run before generating the report
		reports {
			xml.required = false
			csv.required = true
			html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
		}
	}

	jacoco {
		toolVersion = "0.8.7"
	}

}

subprojects {
	dependencies {
		testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	}

	jacocoTestReport {

		getAdditionalSourceDirs().setFrom(files(sourceSets.main.allSource.srcDirs))
		getSourceDirectories().setFrom(files(sourceSets.main.allSource.srcDirs))
		getClassDirectories().setFrom(files(sourceSets.main.output))
		reports {
			html.enabled true
			xml.enabled true
			csv.enabled true
		}
	}
}
tasks.register("codeCoverageReport", JacocoReport) {
	// If a subproject applies the 'jacoco' plugin, add the result it to the report
	subprojects { subproject ->
		subproject.plugins.withType(JacocoPlugin).configureEach {
			subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
				sourceSets subproject.sourceSets.main
				executionData(testTask)
			}

			// To automatically run `test` every time `./gradlew codeCoverageReport` is called,
			// you may want to set up a task dependency between them as shown below.
			// Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
			// may have a negative effect on the configuration time of your build.
			subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
				rootProject.tasks.codeCoverageReport.dependsOn(it)
			}
		}
	}

	// enable the different report types (html, xml, csv)
	reports {
		// xml is usually used to integrate code coverage with
		// other tools like SonarQube, Coveralls or Codecov
		xml.enabled true

		// HTML reports can be used to see code coverage
		// without any external tools
		html.enabled true

		csv.enabled true
	}
}

project(":core") {
	jar {
	    manifest {
	        attributes "Main-Class": "de.syscy.kagecloud.KageCloudCore"
	    }
	}

    dependencies {
		implementation "org.yaml:snakeyaml:1.26"
		implementation "com.google.guava:guava:21.0"
		implementation "commons-io:commons-io:2.5"
		implementation "com.google.code.gson:gson:2.8.0"
		implementation "org.nanohttpd:nanohttpd:2.3.1"
    }

	javadoc {
		failOnError = false
	}
}

project(":velocity") {
    dependencies {
		annotationProcessor "com.velocitypowered:velocity-api:$velocityVersion"

		implementation project(":core")

		implementation "commons-io:commons-io:2.5"

		compileOnly "com.velocitypowered:velocity-api:$velocityVersion"
    }

	shadowJar {
		dependencies {
			exclude(dependency("com.velocitypowered:velocity-api"))
		}
	}

	javadoc {
		failOnError = false
	}
}

project(":wrapper") {
	jar {
	    manifest {
	        attributes "Main-Class": "de.syscy.kagecloud.wrapper.KageCloudWrapper"
	    }
	}

    dependencies {
		implementation project(":core")

		implementation "org.yaml:snakeyaml:1.26"
		implementation "commons-io:commons-io:2.5"
    }

	javadoc {
		failOnError = false
	}
}

project(":plugin") {
    dependencies {
		implementation project(":core")

		implementation "net.pl3x:purpur-server:$purpurVersion"
		implementation "de.syscy:kagecore:$kageCoreVersion"
    }
    
    shadowJar {
    	dependencies {
			exclude(dependency("net.pl3x:purpur-server"))
    		exclude(dependency("de.syscy:kagecore"))
    	}
    }

	javadoc {
		failOnError = false
	}
}